#include "perfs.h"
#include "ocr.h"

// DESC: One worker creates all the counted events with a compile time counter parameter
// TIME: This is a template. Timing info is defined in the file including this one.
//
// VARIABLES:
// - NB_EVT_COUNTED_DEPS
// - NB_INSTANCES
// - NB_ITERS

#ifdef ENABLE_EXTENSION_COUNTED_EVT

ocrGuid_t mainEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    long accTimer = 0;
    int it = 0;
    while (it < NB_ITERS) {
        timestamp_t start;
        timestamp_t stop;
#if CLEAN_UP_ITERATION
        ocrGuid_t evtGuids[NB_INSTANCES];
#endif
#if TIME_CREATION
        get_time(&start);
#endif
        int i = 0;
        ocrEventParams_t params;
        params.EVENT_COUNTED.nbDeps = NB_EVT_COUNTED_DEPS;
        while (i < NB_INSTANCES) {
#if CLEAN_UP_ITERATION
            ocrEventCreateParams(&evtGuids[i], EVENT_TYPE, false, &params);
#else
            ocrGuid_t evtGuid;
            ocrEventCreateParams(&evtGuid, EVENT_TYPE, false, &params);
#endif
            i++;
        }
#if TIME_CREATION
        get_time(&stop);
#endif

#if TIME_DESTRUCTION
        get_time(&start);
#endif
#if CLEAN_UP_ITERATION
        i = 0;
        while (i < NB_INSTANCES) {
            ocrEventDestroy(evtGuids[i]);
            i++;
        }
#endif
#if TIME_DESTRUCTION
        get_time(&stop);
#endif
        accTimer += elapsed_usec(&start, &stop);
        it++;
    }

#if TIME_DESTRUCTION
    print_throughput("Destruction", NB_ITERS * NB_INSTANCES, usec_to_sec(accTimer));
#endif

#if TIME_CREATION
    print_throughput("Creation", NB_ITERS * NB_INSTANCES, usec_to_sec(accTimer));
#endif

    ocrShutdown();

    return NULL_GUID;
}

#else

ocrGuid_t mainEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    ocrPrintf("Test disabled - ENABLE_EXTENSION_COUNTED_EVT not defined\n");
    ocrShutdown();
    return NULL_GUID;
}

#endif
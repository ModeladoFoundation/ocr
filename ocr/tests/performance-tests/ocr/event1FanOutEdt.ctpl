#include "perfs.h"
#include "ocr.h"

// DESC: Create a producer event and consumer EDT depending on it
// TIME: This is a template. Timing info is defined in the file including this one.
// FREQ: Done 'NB_ITERS' times
// NOTE: The driver EDT is a finish EDT to collect created EDTs
//
// VARIABLES
// - NB_ITERS
// - FAN_OUT

// !! These define are for internal use and should NOT be defined externally !!
// Paramc for iteration number and various timer accumulators
#define TPL_DRIVER_PARAMC 4
#define TPL_DRIVER_DEPV 1
#define TPL_DRIVER_PROP EDT_PROP_FINISH

ocrGuid_t consumerEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    ocrGuid_t consDoneGuid = (ocrGuid_t) paramv[0];
    ocrEventSatisfySlot(consDoneGuid, NULL_GUID, OCR_EVENT_LATCH_DECR_SLOT);
    return NULL_GUID;
}

ocrGuid_t driverEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    u64 iteration = paramv[0];
#if TIME_SATISFY
    long accTimerSatisfy = (long) paramv[1];
#endif
#if TIME_CONSUMER_CREATE
    long accTimerConsCreate = (long) paramv[2];
#endif
#if TIME_ADD_DEP
    long accTimerAddDep = (long) paramv[3];
#endif

    if (iteration == NB_ITERS) {
#if TIME_SATISFY
        print_throughput("Satisfy", NB_ITERS, usec_to_sec(accTimerSatisfy));
#endif
#if TIME_CONSUMER_CREATE
        print_throughput("Creation", NB_ITERS, usec_to_sec(accTimerConsCreate));
#endif
#if TIME_ADD_DEP
        print_throughput("AddDependence", NB_ITERS, usec_to_sec(accTimerAddDep));
#endif
        ocrShutdown();
    } else {
        timestamp_t start;
        timestamp_t stop;
        //
        // Setting up producer
        //

        ocrGuid_t prodGuid;
        ocrEventCreate(&prodGuid, PRODUCER_EVENT_TYPE, false);

        ocrGuid_t consDoneGuid;
        ocrEventCreate(&consDoneGuid, OCR_EVENT_LATCH_T, false);
        int i = 0;
        while (i < (FAN_OUT+1)) { // + 1 to avoid racing with next iteration EDT's depv
            ocrEventSatisfySlot(consDoneGuid, NULL_GUID, OCR_EVENT_LATCH_INCR_SLOT);
            i++;
        }


        //
        // Setting up consumers
        //
        ocrGuid_t consEdtTemplateGuid;
        ocrEdtTemplateCreate(&consEdtTemplateGuid, consumerEdt, 1, 1);

        i = 0;
        while (i < FAN_OUT) {
#if TIME_CONSUMER_CREATE
            get_time(&start);
#endif
            ocrGuid_t consGuid;
            ocrEdtCreate(&consGuid, consEdtTemplateGuid,
                         1, (u64*) &consDoneGuid, 1, NULL, EDT_PROP_NONE, NULL_GUID, NULL);
#if TIME_CONSUMER_CREATE
            get_time(&stop);
            accTimerConsCreate += elapsed_usec(&start, &stop);
#endif
#if TIME_ADD_DEP
            get_time(&start);
#endif
            ocrAddDependence(prodGuid, consGuid, 0, DB_MODE_CONST);
#if TIME_ADD_DEP
            get_time(&stop);
            accTimerAddDep += elapsed_usec(&start, &stop);
#endif
            i++;
        }
        ocrEdtTemplateDestroy(consEdtTemplateGuid);

        //
        // Satisfying the producer
        //

#if TIME_SATISFY
        get_time(&start);
#endif
        ocrEventSatisfy(prodGuid, NULL_GUID);
#if TIME_SATISFY
        get_time(&stop);
        accTimerSatisfy += elapsed_usec(&start, &stop);
#endif

        // spawn next iteration
        ocrGuid_t driverEdtTemplateGuid;
        ocrEdtTemplateCreate(&driverEdtTemplateGuid, driverEdt, TPL_DRIVER_PARAMC, TPL_DRIVER_DEPV);
        u64 driverParamv[TPL_DRIVER_PARAMC];
        driverParamv[0] = iteration+1;
#if TIME_SATISFY
        driverParamv[1] = (u64) accTimerSatisfy;
#endif
#if TIME_CONSUMER_CREATE
        driverParamv[2] = (u64) accTimerConsCreate;
#endif
#if TIME_ADD_DEP
        driverParamv[3] = (u64) accTimerAddDep;
#endif

        ocrGuid_t driverEdtGuid;
        ocrEdtCreate(&driverEdtGuid, driverEdtTemplateGuid,
                     TPL_DRIVER_PARAMC, driverParamv, TPL_DRIVER_DEPV, &consDoneGuid, EDT_PROP_NONE, NULL_GUID, NULL);
        ocrEdtTemplateDestroy(driverEdtTemplateGuid);
        ocrEventSatisfySlot(consDoneGuid, NULL_GUID, OCR_EVENT_LATCH_DECR_SLOT);
    }
}

ocrGuid_t mainEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {

    // spawn first iteration
    ocrGuid_t driverEdtTemplateGuid;
    ocrEdtTemplateCreate(&driverEdtTemplateGuid, driverEdt, TPL_DRIVER_PARAMC, TPL_DRIVER_DEPV);
    u64 driverParamv[TPL_DRIVER_PARAMC];
    driverParamv[0] = 0; // iteration
    driverParamv[1] = (u64) 0; // timer satisfy (potentially used)
    driverParamv[2] = (u64) 0; // timer consumer creation (potentially used)
    driverParamv[3] = (u64) 0; // timer add-dependence (potentially used)
    ocrGuid_t driverEdtGuid;
    ocrGuid_t fakeDep = NULL_GUID;
    ocrEdtCreate(&driverEdtGuid, driverEdtTemplateGuid,
                 TPL_DRIVER_PARAMC, driverParamv, TPL_DRIVER_DEPV, &fakeDep, TPL_DRIVER_PROP, NULL_GUID, NULL);
    ocrEdtTemplateDestroy(driverEdtTemplateGuid);

    return NULL_GUID;
}

/*
 * This file is subject to the license agreement located in the file LICENSE
 * and cannot be distributed without it. This notice cannot be
 * removed or modified.
 */

#include "perfs.h"
#include "ocr.h"
#include "extensions/ocr-affinity.h"

/**
 * DESC: Create a lazy datablock that's shared with another policy-domain.
 *       There, alternate uses of the DB which triggers a write-back in non lazy mode.
 */

#ifndef NB_ELEMS
#define NB_ELEMS 1
#endif

#ifndef NB_ROUNDS
#define NB_ROUNDS 200000
#endif

#define TARGET_IDX 0
#define ROUNDS_IDX 1
#define TIMER_IDX 2
#define MAX_PARAMV (TIMER_IDX + (sizeof(timestamp_t)/sizeof(u64)))

ocrGuid_t consEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    ocrGuid_t lazyDb = depv[0].guid;
    u64 myId = paramv[TARGET_IDX];
    u64 nbRoundsLeft = paramv[ROUNDS_IDX];
    // PRINTF("Execute on affinity=%"PRIu64" nbRoundsLeft=%"PRIu64"\n", myId, nbRoundsLeft);
    if (nbRoundsLeft == NB_ROUNDS) {
        get_time(((timestamp_t *) &paramv[TIMER_IDX]));
    }
    if (nbRoundsLeft == 0) {
        timestamp_t tstop;
        get_time(&tstop);
        timestamp_t * tstart = (timestamp_t *) &paramv[TIMER_IDX];
        print_throughput_custom("EDT-exec", NB_ROUNDS, elapsed_sec(tstart, &tstop), "");
        ocrShutdown();
        return NULL_GUID;
    }
    ocrDbRelease(lazyDb);

    ocrGuid_t currentAffinity;
    ocrAffinityGetCurrent(&currentAffinity);
    paramv[ROUNDS_IDX] = nbRoundsLeft-1;
    ocrHint_t edtHint;
    ocrHintInit(&edtHint, OCR_HINT_EDT_T);
    ocrSetHintValue(&edtHint, OCR_HINT_EDT_AFFINITY, ocrAffinityToHintValue(currentAffinity));
    ocrGuid_t edtTpl;
    ocrEdtTemplateCreate(&edtTpl, consEdt, MAX_PARAMV, 1);
    ocrGuid_t edt;
    ocrEdtCreate(&edt, edtTpl, MAX_PARAMV, paramv,
                 1, &lazyDb, EDT_PROP_NONE, &edtHint, NULL);
    ocrEdtTemplateDestroy(edtTpl);
    return NULL_GUID;

}

ocrGuid_t mainEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    // Create the lazy DB
    u64 affinityCount;
    ocrAffinityCount(AFFINITY_PD, &affinityCount);
    ASSERT(affinityCount >= 1);
    ocrGuid_t affinities[affinityCount];
    ocrAffinityGet(AFFINITY_PD, &affinityCount, affinities);

    ocrHint_t dbHint;
    ocrHintInit( &dbHint, OCR_HINT_DB_T );
#if USE_LAZY_DB
    ocrSetHintValue(&dbHint, OCR_HINT_DB_LAZY, 1);
#endif
    ocrGuid_t lazyDb;
    u32 * dbPtr;
    ocrDbCreate(&lazyDb, (void **)&dbPtr, sizeof(u32)*NB_ELEMS, 0, &dbHint, NO_ALLOC);
    u32 i = 0;
    while (i < NB_ELEMS) {
        dbPtr[i] = 0;
        i++;
    }
    ocrDbRelease(lazyDb);
    u64 nparamv[MAX_PARAMV];
    nparamv[TARGET_IDX] = affinityCount-1;
    nparamv[ROUNDS_IDX] = NB_ROUNDS;
    ocrHint_t edtHint;
    ocrHintInit(&edtHint, OCR_HINT_EDT_T);
    ocrSetHintValue(&edtHint, OCR_HINT_EDT_AFFINITY, ocrAffinityToHintValue(affinities[affinityCount-1]));
    ocrGuid_t edtTpl;
    ocrEdtTemplateCreate(&edtTpl, consEdt, MAX_PARAMV, 1);
    ocrGuid_t edt;
    ocrEdtCreate(&edt, edtTpl, MAX_PARAMV, nparamv,
                 1, &lazyDb, EDT_PROP_NONE, &edtHint, NULL);
    ocrEdtTemplateDestroy(edtTpl);

    return NULL_GUID;
}

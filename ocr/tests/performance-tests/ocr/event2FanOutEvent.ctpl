
#include "perfs.h"
#include "ocr.h"

// DESC: Create a producer event and 'FAN_OUT' consumer event depending on it.
// TIME: Satisfy the producer event
// FREQ: Done 'NB_ITERS' times
// NOTE: The driver EDT is a finish EDT to collect created EDTs

#ifndef CUSTOM_BOUNDS
#define NB_ITERS 5000
#define FAN_OUT 1000
#endif

// Paramc for accumulated time and iteration number
#define DRIVER_PARAMC 2
#define DRIVER_DEPV 0
#define DRIVER_PROP EDT_PROP_NONE

ocrGuid_t consumerEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    return NULL_GUID;
}

ocrGuid_t driverEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    long accTimerSatisfy = (long) paramv[0];
    u64 iteration = paramv[1];
#if TIME_CONSUMER_CREATE
    long accTimerConsCreate = 0;
#endif
#if TIME_CONSUMER_DESTRUCT
    long accTimerConsDestruct = 0;
#endif
#if TIME_ADD_DEP
    long accTimerAddDep = 0;
#endif

    while (iteration < NB_ITERS) {
        timestamp_t start;
        timestamp_t stop;
        //
        // Setting up producer
        //

        ocrGuid_t prodGuid;
        ocrEventCreate(&prodGuid, PRODUCER_EVENT_TYPE, false);

#ifdef PRODUCER_EVENT_TYPE_IS_LATCH
        ocrEventSatisfySlot(prodGuid, NULL_GUID, OCR_EVENT_LATCH_INCR_SLOT);
#endif
        //
        // Setting up consumers
        //

#if CLEAN_UP_ITERATION
        ocrGuid_t consGuids[FAN_OUT];
#if TIME_CONSUMER_CREATE
        get_time(&start);
#endif
        int i = 0;
        while (i < FAN_OUT) {
            ocrEventCreate(&consGuids[i], CONSUMER_EVENT_TYPE, false);
            i++;
        }
#if TIME_CONSUMER_CREATE
        get_time(&stop);
        accTimerConsCreate += elapsed_usec(&start, &stop);
#endif

#if TIME_ADD_DEP
        get_time(&start);
#endif
        i = 0;
        while (i < FAN_OUT) {
            ocrAddDependence(prodGuid, consGuids[i], 0, DB_MODE_RO);
            i++;
        }

#if TIME_ADD_DEP
        get_time(&stop);
        accTimerAddDep += elapsed_usec(&start, &stop);
#endif

#else // No clean up iteration, need to mix creation and add-dependence.

        int i = 0;
        while (i < FAN_OUT) {
            ocrGuid_t consGuid;
#if TIME_CONSUMER_CREATE
            get_time(&start);
#endif
            ocrEventCreate(&consGuid, CONSUMER_EVENT_TYPE, false);
#if TIME_CONSUMER_CREATE
            get_time(&stop);
            accTimerConsCreate += elapsed_usec(&start, &stop);
#endif
#if TIME_ADD_DEP
            get_time(&start);
#endif
            ocrAddDependence(prodGuid, consGuid, 0, DB_MODE_RO);
#if TIME_ADD_DEP
            get_time(&stop);
            accTimerAddDep += elapsed_usec(&start, &stop);
#endif
            i++;
        }
#endif

        //
        // Satisfying the producer
        //

#if TIME_SATISFY
        get_time(&start);
#endif

#ifdef PRODUCER_EVENT_TYPE_IS_LATCH
        ocrEventSatisfySlot(prodGuid, NULL_GUID, OCR_EVENT_LATCH_DECR_SLOT);
#else
        ocrEventSatisfy(prodGuid, NULL_GUID);
#endif

#if TIME_SATISFY
        get_time(&stop);
        accTimerSatisfy += elapsed_usec(&start, &stop);
#endif

#if CLEAN_UP_ITERATION
#if TIME_CONSUMER_DESTRUCT
        get_time(&start);
#endif
        ocrEventDestroy(prodGuid);
        i = 0;
        while (i < FAN_OUT) {
            ocrEventDestroy(consGuids[i]);
            i++;
        }
#if TIME_CONSUMER_DESTRUCT
        get_time(&stop);
        accTimerConsDestruct += elapsed_usec(&start, &stop);
#endif
#endif
        iteration++;
    }

#if TIME_CONSUMER_CREATE
    print_throughput("Creation", NB_ITERS*FAN_OUT, usec_to_sec(accTimerConsCreate));
#endif
#if TIME_ADD_DEP
    print_throughput("AddDependence", NB_ITERS, usec_to_sec(accTimerAddDep));
#endif
#if TIME_SATISFY
    print_throughput("Satisfy", NB_ITERS, usec_to_sec(accTimerSatisfy));
#endif
#if TIME_CONSUMER_DESTRUCT
    print_throughput("Destruction", NB_ITERS*FAN_OUT, usec_to_sec(accTimerConsDestruct));
#endif
    ocrShutdown();
}

ocrGuid_t mainEdt(u32 paramc, u64* paramv, u32 depc, ocrEdtDep_t depv[]) {
    long accTimer = 0;
    u64 iteration = 0;

    // spawn first iteration
    ocrGuid_t driverEdtTemplateGuid;
    ocrEdtTemplateCreate(&driverEdtTemplateGuid, driverEdt, DRIVER_PARAMC, DRIVER_DEPV);
    u64 driverParamv[DRIVER_PARAMC];
    driverParamv[0] = (u64) accTimer;
    driverParamv[1] = iteration;
    ocrGuid_t driverEdtGuid;
    ocrEdtCreate(&driverEdtGuid, driverEdtTemplateGuid,
                 DRIVER_PARAMC, driverParamv, DRIVER_DEPV, NULL, DRIVER_PROP, NULL_GUID, NULL);
    ocrEdtTemplateDestroy(driverEdtTemplateGuid);

    return NULL_GUID;
}

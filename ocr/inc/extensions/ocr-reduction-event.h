/*
 * This file is subject to the license agreement located in the file LICENSE
 * and cannot be distributed without it. This notice cannot be
 * removed or modified.
 */

#ifndef __OCR_REDUCTION_EVENT_H__
#define __OCR_REDUCTION_EVENT_H__

#ifdef ENABLE_EXTENSION_COLLECTIVE_EVT

typedef u16 redOp_t;

typedef enum {
    COL_REDUCE,
    COL_ALLREDUCE,
    COL_BROADCAST
} collectiveType_t;

// ordered from LSB to MSB
#define REDOP_BIT_COUNT               (16) // size of the REDOP bitfield in number of bits
#define REDOP_ASSOCIATIVE_SIZE        (1)
#define REDOP_COMMUTATIVE_SIZE        (1)
#define REDOP_DATUM_SIZE_SIZE         (3) // encode the size in bytes + 1 (i.e 0 is actually 1 byte)
#define REDOP_SIGNED_SIZE             (1) // 0 or 1 for unsigned or signed
#define REDOP_TYPE_SIZE               (1) // 0 for integer 1 for real
#define REDOP_OPERATOR_SIZE           (3) // 7 operations so far ADD, MULTIPLY, MIN, MAX, BITAND, BITOR, BITXOR

// Start indices for each field (MSB)
#define REDOP_ASSOCIATIVE_SIDX        (REDOP_ASSOCIATIVE_SIZE)
#define REDOP_COMMUTATIVE_SIDX        (REDOP_ASSOCIATIVE_SIDX+REDOP_COMMUTATIVE_SIZE)
#define REDOP_DATUM_SIZE_SIDX         (REDOP_COMMUTATIVE_SIDX+REDOP_DATUM_SIZE_SIZE)
#define REDOP_SIGNED_SIDX             (REDOP_DATUM_SIZE_SIDX+REDOP_SIGNED_SIZE)
#define REDOP_TYPE_SIDX               (REDOP_SIGNED_SIDX+REDOP_TYPE_SIZE)
#define REDOP_OPERATOR_SIDX           (REDOP_TYPE_SIDX+REDOP_OPERATOR_SIZE)

// Size of the field
#define REDOP_SIZE(name)          (REDOP_##name##_SIZE)
// Start index of the field (MSB)
#define REDOP_SIDX(name)          (REDOP_##name##_SIDX)
// End index of the field (LSB)
#define REDOP_EIDX(name)          (REDOP_SIDX(name)-REDOP_SIZE(name))

#define REDOP_ASSOCIATIVE   (1<<(REDOP_EIDX(ASSOCIATIVE)))
#define REDOP_COMMUTATIVE   (1<<(REDOP_EIDX(COMMUTATIVE)))
#define REDOP_BS1           (0)
#define REDOP_BS2           (1<<(REDOP_EIDX(DATUM_SIZE)))
#define REDOP_BS4           (3<<(REDOP_EIDX(DATUM_SIZE)))
#define REDOP_BS8           (7<<(REDOP_EIDX(DATUM_SIZE)))
#define REDOP_ADD           (0)
#define REDOP_MULT          (1)
#define REDOP_MIN           (2)
#define REDOP_MAX           (3)
#define REDOP_BITAND        (4)
#define REDOP_BITOR         (5)
#define REDOP_BITXOR        (6)
#define REDOP_SIGNED        (1<<(REDOP_EIDX(SIGNED)))
#define REDOP_UNSIGNED      (0)
#define REDOP_REAL          (1<<(REDOP_EIDX(TYPE)))
#define REDOP_INTEGER       (0)

// Define reduction operations available out of the box
#define REDOP_F8_ADD     (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS8 | REDOP_SIGNED | REDOP_REAL | REDOP_ADD)
#define REDOP_F8_MULT    (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS8 | REDOP_SIGNED | REDOP_REAL | REDOP_MULT)
#define REDOP_F8_MIN     (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS8 | REDOP_SIGNED | REDOP_REAL | REDOP_MIN)
#define REDOP_F8_MAX     (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS8 | REDOP_SIGNED | REDOP_REAL | REDOP_MAX)
#define REDOP_U8_ADD     (REDOP_BS8 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_ADD)
#define REDOP_U8_MULT    (REDOP_BS8 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_MULT)
#define REDOP_U8_MIN     (REDOP_BS8 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_MIN)
#define REDOP_U8_MAX     (REDOP_BS8 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_MAX)
#define REDOP_U8_BITAND  (REDOP_BS8 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_BITAND)
#define REDOP_U8_BITOR   (REDOP_BS8 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_BITOR)
#define REDOP_U8_BITXOR  (REDOP_BS8 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_BITXOR)
#define REDOP_S8_MIN     (REDOP_BS8 | REDOP_SIGNED | REDOP_INTEGER | REDOP_MIN)
#define REDOP_S8_MAX     (REDOP_BS8 | REDOP_SIGNED | REDOP_INTEGER | REDOP_MAX)
#define REDOP_F4_ADD     (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS4 | REDOP_SIGNED | REDOP_REAL | REDOP_ADD)
#define REDOP_F4_MULT    (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS4 | REDOP_SIGNED | REDOP_REAL | REDOP_MULT)
#define REDOP_F4_MIN     (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS4 | REDOP_SIGNED | REDOP_REAL | REDOP_MIN)
#define REDOP_F4_MAX     (REDOP_ASSOCIATIVE | REDOP_COMMUTATIVE | REDOP_BS4 | REDOP_SIGNED | REDOP_REAL | REDOP_MAX)
#define REDOP_U4_ADD     (REDOP_BS4 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_ADD)
#define REDOP_U4_MULT    (REDOP_BS4 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_MULT)
#define REDOP_U4_MIN     (REDOP_BS4 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_MIN)
#define REDOP_U4_MAX     (REDOP_BS4 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_MAX)
#define REDOP_S4_MIN     (REDOP_BS4 | REDOP_SIGNED | REDOP_INTEGER | REDOP_MIN)
#define REDOP_S4_MAX     (REDOP_BS4 | REDOP_SIGNED | REDOP_INTEGER | REDOP_MAX)
#define REDOP_U4_BITAND  (REDOP_BS4 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_BITAND)
#define REDOP_U4_BITOR   (REDOP_BS4 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_BITOR)
#define REDOP_U4_BITXOR  (REDOP_BS4 | REDOP_UNSIGNED | REDOP_INTEGER | REDOP_BITXOR)


u8 ocrEventCollectiveSatisfySlot(ocrGuid_t eventGuid, void * dataPtr, u32 islot);

#endif /* ENABLE_EXTENSION_COLLECTIVE_EVT */
#endif /*__OCR_REDUCTION_EVENT_H__*/
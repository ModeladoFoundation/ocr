#
# This file is subject to the license agreement located in the file LICENSE
# and cannot be distributed without it. This notice cannot be
# removed or modified.
#

# ==========================================================================================================
# OCR Config
#
# The general structure is as follows
#
# [Object type n] n = 0..types
#     name = name of type, mandatory
#     other config specific to this type
#
# [Object instance n] n = 0..count
#     id = unique id, mandatory
#     type = <refer to the type above>, mandatory
#     other config specific to this instance
#

# =========================================================================================================
# Guid config
#

[GuidType0]
   name                         = PTR

[GuidInst0]
   id                           = 0
   type                         = PTR


# ==========================================================================================================
# Policy domain config
#

[PolicyDomainType0]
   name                         = CE

[PolicyDomainType1]
   name                         = XE

[PolicydomainInst0]
   id                           = 1-8
   type                         = XE
   worker                       = 0-7
   scheduler                    = 0-7
   commapi                      = 0-7
   allocator                    = 0
   guid                         = 0
   parent                       = 0
   location                     = 0-7
# factories go below here, instances go above here
   taskfactory                  = HC
   tasktemplatefactory          = HC
   datablockfactory             = Lockable
   eventfactory                 = HC
#   costfunction                = NULL currently

[PolicydomainInst1]
   id                           = 0
   type                         = CE
   worker                       = 8
   scheduler                    = 8
   commapi                      = 8
   allocator                    = 1-14
   guid                         = 0
   parent                       = 0
   location                     = 8
# factories go below here, instances go above here
   taskfactory                  = HC
   tasktemplatefactory          = HC
   datablockfactory             = Lockable
   eventfactory                 = HC
#   costfunction                = NULL currently

[TaskType0]
   name                         = HC

[TaskTemplateType0]
   name                         = HC

[DataBlockType0]
   name                         = Lockable

[EventType0]
   name                         = HC

# ==============================
# Memory Platform config
#

[MemPlatformType0]
   name                         = malloc

[MemPlatformInstForNullPlaceholderForXE]
   id                           = 0
   type                         = malloc
   size                         = 0

[MemPlatformInstForL1]
   id                           = 1-9
   type                         = malloc
   size                         = 65536       # 64K

[MemPlatformInstForL2]
   id                           = 10
   type                         = malloc
   size                         = 4259840     # 4MB+64KB

[MemPlatformInstForL3]
   id                           = 11
   type                         = malloc
   size                         = 33619968    # 32MB+64KB

[MemPlatformInstForSocketDRAM]
   id                           = 12
   type                         = malloc
   size                         = 134283264   # 128MB+64KB

[MemPlatformInstForSocketNVM]
   id                           = 13
   type                         = malloc
   size                         = 67174400    # 64MB+64KB

[MemPlatformInstForGlobalNVM]
   id                           = 14
   type                         = malloc
   size                         = 536936448   # 512MB+64KB

# ==============================
# Memory Target config
#
#
# Up to eight "levels" of memory allocator hierarchy are supported, indexed from 0 to 7 (inclusive).
# (Level=0 is fine for the null allocator).  Roughly speaking, lower level numbers are closer to the
# processing agents, providing faster access for less power.  However, the concept of "level" is a
# bit elastic (mushy).  For instance, at the per-socket level, there might be DRAM and/or there might
# be NVM.  DRAM is likely to support faster access and/or higher bandwidth that NVM, but NVM might
# operate at lower power (i.e. its leakage power is lower, though its access power is higher).  NVM
# is also more attractive for data needed to persist awhile, e.g. for resiliency.  Consequently,
# which one of these two memories is a lower value for the level index, is subject to debate (or
# experimentation).  Note, though, that different allocator search "prescriptions" can be utilized
# to favor NVM versus DRAM, so deciding which of these memories is the lower level is a little bit
# arbitrary.  The assignments below are a trial balloon.

[MemTargetType0]
   name                         = shared

[MemTargetInstForNullPlaceholderForXe]
   id                           = 0
   type                         = shared
   size                         = 0
   memplatform                  = 0
   level                        = 0

[MemTargetInstForL1]
   id                           = 1-9
   type                         = shared
   size                         = 49152       # 48KB (less than 64K size of L1 on the notion that some will be taken by static allocations. FIXME)
   memplatform                  = 1-9
   level                        = 0           # L1 is at level index 0, the Agent level.

[MemTargetInstForL2]
   id                           = 10
   type                         = shared
   size                         = 4259840     # 4MB+64KB
   memplatform                  = 10
   level                        = 1           # L2 is at level index 1, the Block level.

[MemTargetInstForL3]
   id                           = 11
   type                         = shared
   size                         = 33619968    # 32MB+64KB
   memplatform                  = 11
   level                        = 2           # L3 is at level index 2, the Die level.  It is sliced
                                              # across the blocks of each die.  Modeled here for
                                              # concept demo purposes is 8 per-block slices, 4MB each.

# The ordering (i.e. level assignments) of Socket DRAM and NVM is probably a bit arbitrary.  In the
# fullness of time, the "prescription" for the order in which allocators are tried should probably
# be different for data that is better targeted to one type versus the other.

[MemTargetInstForSocketDRAM]
   id                           = 12
   type                         = shared
   size                         = 134283264   # 128MB+64KB
   memplatform                  = 12
   level                        = 3           # Socket-level DRAM.  (Faster, bigger than NVM, but
                                              # volatile, higher leakage power.)

[MemTargetInstForSocketNVM]
   id                           = 13
   type                         = shared
   size                         = 67174400    # 64MB+64KB
   memplatform                  = 13
   level                        = 4           # Socket-level NVM.

[MemTargetInstForGlobalNVM]
   id                           = 14
   type                         = shared
   size                         = 536936448   # 512MB+64KB
   memplatform                  = 14
   level                        = 5           # Global memory (NVM) sliced across all boards of entire system.

# ==============================
# Allocator config
#

# Allocator types
[AllocatorType0]
   name                         = tlsf

[AllocatorType1]
   name                         = null

# Allocator instances
[AllocatorInstNull]
   id                           = 0
   type                         = null
   size                         = 0 # 0 MB
   memtarget                    = 0

[AllocatorInstForL1]
   id                           = 1-9
   type                         = tlsf
   size                         = 49152       # 48K (estimated L1 left over after non-heap static purposes.  TODO: make this precisely fit leftover space, subject to a minimum for TLSF overhead tables.)
   memtarget                    = 1-9

[AllocatorInstForL2]
   id                           = 10
   type                         = tlsf
   size                         = 4194304     # 4M (TODO: same as above.)
   memtarget                    = 10

[AllocatorInstForL3]
   id                           = 11
   type                         = tlsf
   size                         = 33554432    # 32M (TODO: same as above.)
   memtarget                    = 11
   slicecount                   = 16          # Lop this many "slices" off the overall size.  The slices will be utilized
                                              # in round-robin fashion at demand time.  Slicing reduces contention.
   slicesize                    = 131072      # Slices will be of this size.  (Gross size:  includes pool_t header and all block header_t's)

[AllocatorInstForSocketDRAM]
   id                           = 12
   type                         = tlsf
   size                         = 134217728   # 128M (TODO: same as above.)
   memtarget                    = 12
   slicecount                   = 32          # Lop this many "slices" off the overall size.  The slices will be utilized
                                              # in round-robin fashion at demand time.  Slicing reduces contention.
   slicesize                    = 524288      # Slices will be of this size.  (Gross size:  includes pool_t header and all block header_t's)

[AllocatorInstForSocketNVM]
   id                           = 13
   type                         = tlsf
   size                         = 67108864    #64MB (TODO: same as above)
   memtarget                    = 13
   slicecount                   = 32          # Lop this many "slices" off the overall size.  The slices will be utilized
                                              # in round-robin fashion at demand time.  Slicing reduces contention.
   slicesize                    = 262144      # Slices will be of this size.  (Gross size:  includes pool_t header and all block header_t's)


[AllocatorInstForGlobalNVM]
   id                           = 14
   type                         = tlsf
   size                         = 536870912   #512MB  just a proxy for how large main memory might end up being.  TODO: same as above.)
   memtarget                    = 14
   slicecount                   = 128         # Lop this many "slices" off the overall size.  The slices will be utilized
                                              # in round-robin fashion at demand time.  Slicing reduces contention.
   slicesize                    = 1048576     # Slices will be of this size.  (Gross size:  includes pool_t header and all block header_t's)


# ==============================
# Comm platform config
#

[CommPlatformType0]
   name                         = CePthread

[CommPlatformType1]
   name                         = XePthread

[CommPlatformInst0]
   id                           = 8
   type                         = CePthread # Refer to the type by name

[CommPlatformInst1]
   id                           = 0-7
   type                         = XePthread # Refer to the type by name


# ==============================
# Comm API config
#

[CommApiType0]
   name                         = Handleless

[CommApiInst0]
   id                           = 0-8
   type                         = Handleless
   commplatform                 = 0-8

# ==============================
# Comp platform config
#

[CompPlatformType0]
   name                         = pthread
   stacksize                    = 0 # in MB

[CompPlatformInst0]
   id                           = 0-7
   type                         = pthread # Refer to the type by name
   stacksize                    = 0 # in MB
   ismasterthread               = 0

[CompPlatformInst1]
   id                           = 8
   type                         = pthread # Refer to the type by name
   stacksize                    = 0 # in MB
   ismasterthread               = 1

# ==============================
# Comp target config
#

[CompTargetType0]
   name                         = PASSTHROUGH
   frequency                    = 3400 # in MHz

[CompTargetInst0]
   id                           = 0-8
   type                         = PASSTHROUGH
   compplatform                 = 0-8

# ==============================
# Worker config
#

[WorkerType0]
   name                         = CE

[WorkerType1]
   name                         = XE

[WorkerInst1]
   id                           = 0-7
   type                         = XE
   workertype                   = slave
   comptarget                   = 0-7

[WorkerInst0]
   id                           = 8
   type                         = CE
   workertype                   = master
   comptarget                   = 8

# ==============================
# Workpile config
#

[WorkPileType0]
   name                         = CE

[WorkPileType1]
   name                         = XE

[WorkpileInst1]
   id                           = 0-7
   type                         = XE

[WorkpileInst0]
   id                           = 8
   type                         = CE

# ==============================
# Scheduler config
#

[SchedulerType0]
   name                         = CE

[SchedulerType1]
   name                         = XE

[SchedulerInst1]
   id                           = 0-7
   type                         = XE
   workpile                     = 0-7

[SchedulerInst0]
   id                           = 8
   type                         = CE
   workpile                     = 8
   workeridfirst                = 8


#!/bin/bash


# User-provided or generated
OCR_CONFIG=
PROGRAM_BIN=

#
# Handling options
#

while [ $# -gt 0 ]; do
    if [[ "$1" = "-ocr:cfg" && $# -ge 2 ]]; then
        shift
        OCR_CONFIG=("$@")
        shift
   else
        # stacking unknown arguments
        ARGS="${ARGS} $1"
        shift
    fi
done

NB_ARGS=`echo $ARGS | wc -w`

if [ ${NB_ARGS} -eq 0 ]; then
    echo "error: missing program name argument"
    exit 1
elif [ ${NB_ARGS} -lt 1 ]; then
    echo "error: unexpected number of arguments"
    exit 2
else
    PROGRAM_BIN=${ARGS}
fi

if [ "${OCR_CONFIG}" = "" ]; then
    #Call the config generator
    perl ${OCR_ROOT}/bin/config-generator.py
    #TODO this only works with default CFG filename
    OCR_CONFIG=${PWD}/default.cfg
fi

# Determine what the configuration file is trying to do

#
# Warning: This is a very rough first implementation round
#

# Checking for MPI-backed runtime
RES=`grep "MPI" ${OCR_CONFIG}`

if [[ "$RES" != "" ]]; then
    #Default to 2 nodes for now
    #TODO This information should be extracted from the config file
    if [[ "$OCR_NUM_NODES" == "" ]]; then
        OCR_NUM_NODES=2
    fi
    # TODO ifdef
    mpirun -np ${OCR_NUM_NODES} ${PROGRAM_BIN} -ocr:cfg ${OCR_CONFIG}
    RET_CODE=$?
    exit ${RET_CODE}
fi

# Checking for FSIM-backed runtime
RES=`grep "fsim" ${OCR_CONFIG}`

if [[ "$RES" != "" ]]; then
    echo "TODO invoke FSIM"
    exit 1
fi


# Default is regular X86-backend
${PROGRAM_BIN} -ocr:cfg ${OCR_CONFIG}
RET_CODE=$?
exit ${RET_CODE}


